{"ast":null,"code":"import _slicedToArray from \"/Users/clementine/Desktop/Code-Bits/ReactJS/dashboard/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/clementine/Desktop/Code-Bits/ReactJS/dashboard/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/clementine/Desktop/Code-Bits/ReactJS/dashboard/client/src/tasks.js\";\nimport React, { useState, useEffect, useReducer } from 'react';\nimport uuid from 'uuid/v4';\nconst initialTaskState = {\n  tasks: [],\n  completedTasks: []\n};\nconst TYPES = {\n  ADD_TASK: 'ADD_TASK',\n  COMPLETE_TASK: 'COMPLETE_TASK',\n  DELETE_TASK: 'DELETE_TASK'\n};\n\nconst tasksReducer = (state, action) => {\n  console.log('state', state);\n  console.log('action', action);\n\n  switch (action.type) {\n    case TYPES.ADD_TASK:\n      return _objectSpread({}, state, {\n        tasks: [...state.tasks, action.task]\n      });\n\n    case TYPES.COMPLETE_TASK:\n      const completedTask = action.completedTask;\n      return _objectSpread({}, state, {\n        completedTasks: [...state.completedTasks, completedTask],\n        tasks: state.tasks.filter(t => t.id !== completedTask.id)\n      });\n\n    case TYPES.DELETE_TASK:\n      return _objectSpread({}, state, {\n        completedTasks: state.completedTasks.filter(t => t.id !== action.task.id)\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst TASKS_STORAGE_KEY = 'TASKS_STORAGE_KEY';\n\nconst storeTasks = taskMap => {\n  localStorage.setItem(TASKS_STORAGE_KEY, JSON.stringify(taskMap));\n}; // Utilizes local storage for previous tasks\n\n\nconst readStoredTasks = () => {\n  const tasksMap = JSON.parse(localStorage.getItem(TASKS_STORAGE_KEY));\n  return tasksMap ? tasksMap : {\n    tasks: [],\n    completedTasks: []\n  };\n};\n\nfunction Tasks() {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        taskText = _useState2[0],\n        setTaskText = _useState2[1];\n\n  const storedTasks = readStoredTasks();\n\n  const _useReducer = useReducer(tasksReducer, initialTaskState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  useEffect(() => {\n    storeTasks({\n      tasks,\n      completedTasks\n    });\n  });\n\n  const updateTaskText = event => {\n    setTaskText(event.target.value);\n  };\n\n  const addTask = () => {\n    dispatch({\n      type: TYPES.ADD_TASK,\n      task: {\n        taskText,\n        id: uuid()\n      }\n    });\n    setTasks([...tasks, {\n      taskText,\n      id: uuid()\n    }]);\n  };\n\n  const completeTask = completedTask => () => {\n    dispatch({\n      type: TYPES.COMPLETE_TASK,\n      completedTask\n    });\n    setCompletedTasks([...completedTasks, completedTask]);\n    setTasks(tasks.filter(task => task.id !== completedTask.id));\n  };\n\n  const deleteTask = task => () => {\n    dispatch({\n      type: TYPES.DELETE_TASK,\n      task\n    });\n    setCompletedTasks(completedTasks.filter(t => t.id !== task.id));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Tasks\"), React.createElement(\"div\", {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    value: taskText,\n    onChange: updateTaskText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: addTask,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"Add Task\")), React.createElement(\"div\", {\n    className: \"task-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, tasks.map(task => {\n    const id = task.id,\n          taskText = task.taskText;\n    return React.createElement(\"div\", {\n      key: id,\n      onClick: completeTask(task),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, taskText);\n  })), React.createElement(\"div\", {\n    className: \"completed-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, completedTasks.map(task => {\n    const id = task.id,\n          taskText = task.taskText;\n    return React.createElement(\"div\", {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, taskText, \" \", ' ', React.createElement(\"span\", {\n      className: \"delete-task\",\n      onClick: deleteTask(task),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"x\"));\n  })));\n}\n\nexport default Tasks;","map":{"version":3,"sources":["/Users/clementine/Desktop/Code-Bits/ReactJS/dashboard/client/src/tasks.js"],"names":["React","useState","useEffect","useReducer","uuid","initialTaskState","tasks","completedTasks","TYPES","ADD_TASK","COMPLETE_TASK","DELETE_TASK","tasksReducer","state","action","console","log","type","task","completedTask","filter","t","id","TASKS_STORAGE_KEY","storeTasks","taskMap","localStorage","setItem","JSON","stringify","readStoredTasks","tasksMap","parse","getItem","Tasks","taskText","setTaskText","storedTasks","dispatch","updateTaskText","event","target","value","addTask","setTasks","completeTask","setCompletedTasks","deleteTask","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\nimport uuid from 'uuid/v4'\n\nconst initialTaskState = {\n  tasks: [],\n  completedTasks: []\n}\n\nconst TYPES = {\n  ADD_TASK: 'ADD_TASK',\n  COMPLETE_TASK: 'COMPLETE_TASK',\n  DELETE_TASK: 'DELETE_TASK'\n}\n\nconst tasksReducer = (state, action) => {\n  console.log('state', state)\n  console.log('action', action)\n\n  switch( action.type ) {\n    case TYPES.ADD_TASK:\n      return {\n        ...state,\n        tasks: [...state.tasks, action.task]\n      }\n    case TYPES.COMPLETE_TASK:\n    const { completedTask } = action\n      return {\n        ...state,\n        completedTasks: [...state.completedTasks, completedTask],\n        tasks: state.tasks.filter(t => t.id !== completedTask.id)\n      }\n    case TYPES.DELETE_TASK:\n      return {\n        ...state,\n        completedTasks: state.completedTasks.filter(t => t.id !== action.task.id)\n      }\n    default:\n      return state\n  }\n}\n\nconst TASKS_STORAGE_KEY = 'TASKS_STORAGE_KEY'\n\nconst storeTasks = taskMap => {\n  localStorage.setItem(\n    TASKS_STORAGE_KEY,\n    JSON.stringify( taskMap )\n  )\n}\n\n// Utilizes local storage for previous tasks\nconst readStoredTasks = () => {\n  const tasksMap = JSON.parse(localStorage.getItem( TASKS_STORAGE_KEY ))\n\n  return tasksMap ? tasksMap : { tasks: [], completedTasks: [] }\n}\n\nfunction Tasks(){\n  const [ taskText, setTaskText ] = useState('')\n  const storedTasks = readStoredTasks()\n\n  const [ state, dispatch ] = useReducer(tasksReducer, initialTaskState)\n\n\n  useEffect( () => {\n    storeTasks({ tasks, completedTasks })\n  })\n\n  const updateTaskText = event => {\n    setTaskText(event.target.value)\n  }\n\n  const addTask = () => {\n    dispatch({ type: TYPES.ADD_TASK, task: { taskText, id: uuid() } })\n\n    setTasks([ ...tasks, { taskText, id: uuid() } ])\n  }\n\n  const completeTask = completedTask => () => {\n    dispatch({ type: TYPES.COMPLETE_TASK, completedTask })\n\n    setCompletedTasks([ ...completedTasks, completedTask ])\n    setTasks(tasks.filter( task => task.id !== completedTask.id ))\n  }\n\n  const deleteTask = task => () => {\n    dispatch({ type: TYPES.DELETE_TASK, task })\n\n\n    setCompletedTasks( completedTasks.filter(t => t.id !== task.id) )\n  }\n\n\n  return (\n    <div>\n      <h3>Tasks</h3>\n      <div className=\"form\">\n        <input type=\"text\"\n          value={ taskText }\n          onChange={ updateTaskText }\n        />\n        <button onClick={ addTask }>Add Task</button>\n      </div>\n      <div className=\"task-list\">\n        {\n          tasks.map(task => {\n            const { id, taskText } = task\n            return (\n              <div key={id}\n                onClick={ completeTask(task) }>\n                { taskText }\n              </div>\n            )\n          })\n        }\n      </div>\n      <div className=\"completed-list\">\n        {\n          completedTasks.map( task => {\n            const { id, taskText } = task\n\n            return (\n              <div key={id}>\n                { taskText } {' '}\n                <span className=\"delete-task\"\n                  onClick={ deleteTask(task) }>x</span>\n              </div>\n            )\n          })\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Tasks\n"]},"metadata":{},"sourceType":"module"}